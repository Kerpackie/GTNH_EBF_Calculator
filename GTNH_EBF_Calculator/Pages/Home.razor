@page "/"
@using GTNH_EBF_Calculator.Core

<div class="container">
    <h3 class="text-center my-4">EBF Overclock Calculator</h3>

    <div class="row">
        <div class="col-sm-12 col-md-6">
            <div class="card mt-4">
                <div class="card-body">
                    <h5 class="card-title">Input</h5>

                    <EditForm Model="calculatorInput" OnValidSubmit="CalculateResults" class="mx-auto">
                            <DataAnnotationsValidator />
                    
                            <div class="form-group">
                                <label for="recipeTier">Recipe Tier</label>
                                <InputSelect id="recipeTier" @bind-Value="calculatorInput.RecipeTier" class="form-control">
                                    @foreach (var tier in Enum.GetValues<Tier>())
                                    {
                                        <option value="@tier">@tier</option>
                                    }
                                </InputSelect>
                            </div>
                    
                            <div class="form-group">
                                <label for="machineTier">Machine Tier</label>
                                <InputSelect id="machineTier" @bind-Value="calculatorInput.MachineTier" class="form-control">
                                    @foreach (var tier in Enum.GetValues<Tier>())
                                    {
                                        <option value="@tier">@tier</option>
                                    }
                                </InputSelect>
                            </div>
                    
                            <div class="form-group">
                                <label for="baseDuration">Base Duration</label>
                                <InputNumber id="baseDuration" @bind-Value="calculatorInput.BaseDuration" class="form-control" />
                            </div>
                    
                            <div class="form-group">
                                <label for="recipeHeat">Recipe Heat</label>
                                <InputNumber id="recipeHeat" @bind-Value="calculatorInput.RecipeHeat" class="form-control" />
                            </div>
                    
                            <div class="form-group">
                                <label for="machineHeat">Machine Heat</label>
                                <InputSelect id="machineHeat" @bind-Value="calculatorInput.MachineHeat" class="form-control">
                                    @foreach (var coil in GregtechValues.Coils.Keys)
                                    {
                                        <option value="@coil">@coil</option>
                                    }
                                </InputSelect>
                            </div>
                    
                            <div class="form-group mt-4">
                                <button type="submit" class="btn btn-primary">Calculate</button>
                            </div>
                        </EditForm>
                </div>
            </div>
        </div>

        <div class="col-sm-12 col-md-6">
            @if (ebfOC != null)
            {
                <div class="card mt-4">
                    <div class="card-body">
                        <h5 class="card-title">Results</h5>
                        <p class="card-text">
                            <strong>Recipe Voltage:</strong> @ebfOC.RecipeVoltage EU/t<br/>
                            <strong>Machine Voltage:</strong> @ebfOC.MachineVoltage EU/t <br/>
                            <strong>Recipe Operating Voltage:</strong> @ebfOC.RecipeOperatingVoltage  EU/t<br/>
                            <br/>
                            <strong>Recipe Heat:</strong> @ebfOC.RecipeHeat <br/>
                            <strong>Machine Heat:</strong> @ebfOC.MachineHeat <br/>
                            <br/>
                            <strong>Base Duration:</strong> @ebfOC.BaseDurationSecs Seconds (@ebfOC.BaseDurationTicks Ticks)<br/>
                            <strong>Operating Duration :</strong> @ebfOC.OperatingDurationSecs Seconds (@ebfOC.OperatingDurationTicks Ticks)<br/>
                            <br/>
                            <strong>Heat Discount Quantity:</strong> @ebfOC.HeatDiscountQuantity <br/>
                            <strong>Heat Overclock Quantity:</strong> @ebfOC.HeatOverclockQuantity <br/>
                            <strong>Power Tier Overclock Quantity:</strong> @ebfOC.PowerTierOverclockQuantity <br/>
                            <br/>
                            <strong>Total Base EU:</strong> @(ebfOC.BaseDurationTicks * ebfOC.RecipeVoltage) EU<br/>
                            <strong>Total EU:</strong> @(ebfOC.OperatingDurationTicks * ebfOC.MachineVoltage) EU<br/>
                            <br/>
                            <strong>Power Difference:</strong> @PowerDifferenceEU() EU <br/>
                            <strong>Power Difference %:</strong> @PowerDifferencePercent() % <br/>
                            <br/>
                            <strong>Time Difference:</strong> @TimeDifferenceSecs() Seconds <br/>
                            <strong>Time Difference %:</strong> @TimeDifferencePercent() % <br/>
                        </p>
                    </div>
                </div>
            }
        </div>
    </div>
</div>

@code {
    private CalculatorInput calculatorInput = new CalculatorInput();
    private EBFOverclock ebfOC;

    public class CalculatorInput
    {
        public Tier RecipeTier { get; set; }
        public Tier MachineTier { get; set; }
        public int BaseDuration { get; set; }
        public int RecipeHeat { get; set; }
        public string MachineHeat { get; set; }
    }

    private void CalculateResults()
    {
        var calculator = new OverclockCalculator(
            GregtechValues.VoltagePractical[(int)calculatorInput.RecipeTier],
            GregtechValues.Voltage[(int)calculatorInput.MachineTier],
            calculatorInput.BaseDuration,
            calculatorInput.RecipeHeat,
            GregtechValues.Coils[calculatorInput.MachineHeat]
        );

        ebfOC = calculator.CalculateEbfOverclock();
    }

    private long PowerDifferenceEU()
    {
        return (ebfOC.OperatingDurationTicks * ebfOC.MachineVoltage) - (ebfOC.BaseDurationTicks * ebfOC.RecipeVoltage);
    }
    
    private double PowerDifferencePercent()
    {
        var result = (PowerDifferenceEU() / (double)(ebfOC.BaseDurationTicks * ebfOC.RecipeVoltage)) * 100;
        return Math.Round(result, 2);
    }
    
    private int TimeDifferenceSecs()
    {
        return (int)(ebfOC.OperatingDurationSecs - ebfOC.BaseDurationSecs);
    }
    
    private double TimeDifferencePercent()
    {
        return (((double)ebfOC.BaseDurationTicks - ebfOC.OperatingDurationTicks) / ebfOC.BaseDurationTicks) * 100;
    }
}